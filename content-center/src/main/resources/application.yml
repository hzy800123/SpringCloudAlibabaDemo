server:
  port: 8090

management:
  endpoint:
    health:
      show-details: always

  endpoints:
    web:
      exposure:
        include: '*'

spring:
  application:
    # 指定 服务名称（使用'-'分隔）
    name: content-center

  datasource:
    url: jdbc:mysql://localhost:3307/content_center?useUnicode=true&characterEncoding=utf8
    hikari:
      username: root
      dirver-class-name: com.mysql.cj.Driver

  cloud:
    nacos:
      discovery:
        # 指定 Nacos Server 的地址
        server-addr: localhost:8848
        # 服务发现 的领域模型：
        # Namespace -> Group -> Service -> Cluster -> Instance
        # 指定 namespace ( dev - dev env namespace )
        namespace: cb472fa5-5350-44b8-b576-d645c2920442
        cluster-name: Guangzhou
        metadata:
          version: V1
    inetutils:
      preferredNetworks:
        - 192.168.1
#        - 192.168

    sentinel:
#      datasource:
#        # 名称随意
#        flow:
#          nacos:
#            server-addr: localhost:8848
#            dataId: ${spring.application.name}-flow-rules
#            namespace: cb472fa5-5350-44b8-b576-d645c2920442
#            groupId: SENTINEL_GROUP
#            # 规则类型，取值见：
#            # org.springframework.cloud.alibaba.sentinel.datasource.RuleType
#            rule-type: flow
#        degrade:
#          nacos:
#            server-addr: localhost:8848
#            dataId: ${spring.application.name}-degrade-rules
#            namespace: cb472fa5-5350-44b8-b576-d645c2920442
#            groupId: SENTINEL_GROUP
#            rule-type: degrade
#        system:
#          nacos:
#            server-addr: localhost:8848
#            dataId: ${spring.application.name}-system-rules
#            namespace: cb472fa5-5350-44b8-b576-d645c2920442
#            groupId: SENTINEL_GROUP
#            rule-type: system
#        authority:
#          nacos:
#            server-addr: localhost:8848
#            dataId: ${spring.application.name}-authority-rules
#            namespace: cb472fa5-5350-44b8-b576-d645c2920442
#            groupId: SENTINEL_GROUP
#            rule-type: authority
#        param-flow:
#          nacos:
#            server-addr: localhost:8848
#            dataId: ${spring.application.name}-param-flow-rules
#            namespace: cb472fa5-5350-44b8-b576-d645c2920442
#            groupId: SENTINEL_GROUP
#            rule-type: param-flow

      # 取消 Sentinel 的懒加载，eager = true
      eager: true

      # 打开 对SpringMVC端点 的保护
      filter:
        enabled: true
      transport:
        # 指定 微服务 使用哪个 IP 和Sentinel Dashboard 控制台通信
        # 如不配置，会自动选择一个IP注册
#        client-ip: 192.168.1.2
        # 指定 微服务 使用哪个 端口 和 Sentinel 控制台通信
        port: 8720
        # 指定 sentinel dashboard 控制台的地址
        dashboard: localhost:8060
        heartbeat-interval-ms: 2000

      web-context-unify: false

    # RocketMQ Stream
    stream:
      rocketmq:
        binder:
          name-server: localhost:9876
      bindings:
        output:
          # 用来指定 Topic
          destination: stream-test-topic
        # 这里的"my-output"，必须与接口 MySource class 里的"my-output"一致
        my-output:
          destination: stream-my-topic


  main:
    allow-bean-definition-overriding: true
# 使用 属性配置 来指定Ribbon的负载均衡的策略
#user-center:
#  ribbon:
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RoundRobinRule
#    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.RandomRule


# 使用 Ribbon 的饥饿加载, 默认是"懒加载"。
ribbon:
  eager-load:
    enable: true
    clients: user-center

logging:
  level:
    com.example.demo.feignclient.UserCenterFeignClient: debug

feign:
  # 为 Feign 整合 Sentinel
  sentinel:
    enabled: true

  client:
    config:
      # Feign局部配置（配置属性方式）
      # 想要调用的 微服务的名称
#      user-center:
#        loggerLevel: FULL

      # Feign全局配置（配置属性方式）
      # 将服务名称 改为default 就可以了
      default:
        loggerLevel: FULL
        # Feign 的拦截器 RequestInterceptor (属性配置方式）
        requestInterceptors: com.example.demo.requestinterceptor.ValidateInterceptorForID

  httpclient:
    # 让 feign 使用 Apache httpclient做请求，而不是默认的 urlconnection
    enable: true
    # feign 的最大连接数
    max-connections: 200
    # feign 的单个路径的最大连接数
    max-connections-per-route: 50
  # 让 feign 使用okhttp做请求，而不是默认的 urlconnection
#  okhttp:
#    enable: true
    # feign 的最大连接数
#    max-connections: 200
    # feign 的单个路径的最大连接数
#    max-connections-per-route: 50

feign.name: user-center

resttemplate:
  sentinel:
    # 关闭 @SentinelRestTemplate 注解
#    enabled: false
    # 打开 @SentinelRestTemplate 注解
    enabled: true

# Alibaba AHAS 商业流控组件（应用高可用服务）的连接配置：
#ahas.namespace: default
#project.name: ContentCenter
#ahas.license: 003bebb3fa9f498abf22fe69577be5e1

rocketmq:
  name-server: localhost:9876
  producer:
    # 必须指定 group
    group: test-group

